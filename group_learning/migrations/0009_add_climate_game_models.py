# Generated by Django 5.2.5 on 2025-09-18 02:19

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("group_learning", "0008_add_choice_specific_impact"),
    ]

    operations = [
        migrations.CreateModel(
            name="ClimateGame",
            fields=[
                (
                    "game_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="group_learning.game",
                    ),
                ),
                (
                    "climate_resilience_meter",
                    models.IntegerField(
                        default=50,
                        help_text="Climate adaptation and mitigation progress (0-100)",
                    ),
                ),
                (
                    "gdp_meter",
                    models.IntegerField(
                        default=50, help_text="Economic health and growth (0-100)"
                    ),
                ),
                (
                    "public_morale_meter",
                    models.IntegerField(
                        default=50,
                        help_text="Citizen satisfaction and social cohesion (0-100)",
                    ),
                ),
                (
                    "environmental_health_meter",
                    models.IntegerField(
                        default=50,
                        help_text="Air, water, and ecosystem quality (0-100)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Game",
                "verbose_name_plural": "Climate Games",
            },
            bases=("group_learning.game",),
        ),
        migrations.CreateModel(
            name="ClimateQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("government", "Government Official"),
                            ("business", "Business Owner"),
                            ("farmer", "Farmer"),
                            ("urban_citizen", "Urban Citizen"),
                            ("ngo_worker", "NGO Worker"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "question_text",
                    models.TextField(help_text="The decision prompt for this role"),
                ),
                (
                    "role_context",
                    models.TextField(
                        blank=True,
                        help_text="Additional background specific to this role's perspective",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Climate Question",
                "verbose_name_plural": "Climate Questions",
                "ordering": ["scenario__round_number", "role"],
            },
        ),
        migrations.CreateModel(
            name="ClimateGameSession",
            fields=[
                (
                    "gamesession_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="group_learning.gamesession",
                    ),
                ),
                (
                    "current_round",
                    models.IntegerField(
                        default=1, help_text="Current scenario round (1-5)"
                    ),
                ),
                (
                    "current_phase",
                    models.CharField(
                        choices=[
                            ("lobby", "Waiting in Lobby"),
                            ("scenario_intro", "Scenario Introduction"),
                            ("question_phase", "Question Response"),
                            ("results_feedback", "Results & Feedback"),
                            ("round_complete", "Round Complete"),
                            ("game_complete", "Game Complete"),
                        ],
                        default="lobby",
                        max_length=20,
                    ),
                ),
                ("current_climate_resilience", models.IntegerField(default=50)),
                ("current_gdp", models.IntegerField(default=50)),
                ("current_public_morale", models.IntegerField(default=50)),
                ("current_environmental_health", models.IntegerField(default=50)),
                ("round_start_time", models.DateTimeField(blank=True, null=True)),
                ("phase_start_time", models.DateTimeField(blank=True, null=True)),
                (
                    "climate_game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="climate_sessions",
                        to="group_learning.climategame",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Game Session",
                "verbose_name_plural": "Climate Game Sessions",
            },
            bases=("group_learning.gamesession",),
        ),
        migrations.CreateModel(
            name="ClimateOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option_letter",
                    models.CharField(
                        choices=[
                            ("a", "Option A"),
                            ("b", "Option B"),
                            ("c", "Option C"),
                            ("d", "Option D"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "option_text",
                    models.TextField(
                        help_text="The action/decision this option represents"
                    ),
                ),
                (
                    "immediate_consequence",
                    models.TextField(
                        help_text="Bold text describing trade-offs and risks"
                    ),
                ),
                (
                    "outcome_logic",
                    models.JSONField(
                        default=dict,
                        help_text="Impact on climate_resilience, gdp, public_morale, environmental_health",
                    ),
                ),
                (
                    "selection_count",
                    models.IntegerField(
                        default=0, help_text="How many times this option was chosen"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="group_learning.climatequestion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Option",
                "verbose_name_plural": "Climate Options",
                "ordering": [
                    "question__scenario__round_number",
                    "question__role",
                    "option_letter",
                ],
                "unique_together": {("question", "option_letter")},
            },
        ),
        migrations.CreateModel(
            name="ClimateScenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "round_number",
                    models.IntegerField(
                        choices=[
                            (1, "Round 1: Delhi Air Pollution Crisis"),
                            (2, "Round 2: Mumbai Floods"),
                            (3, "Round 3: Chennai Water Shortage"),
                            (4, "Round 4: Migration & Heatwave"),
                            (5, "Round 5: National Election/Policy"),
                        ]
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="e.g., 'Delhi Air Pollution Crisis'", max_length=200
                    ),
                ),
                (
                    "context_description",
                    models.TextField(help_text="Background situation and stakes"),
                ),
                (
                    "background_image",
                    models.URLField(
                        blank=True, help_text="URL to India-specific background image"
                    ),
                ),
                (
                    "news_quotes",
                    models.JSONField(
                        default=list,
                        help_text="Array of fake news quotes to set atmosphere",
                    ),
                ),
                (
                    "potential_consequences",
                    models.JSONField(
                        default=list,
                        help_text="2-3 potential consequences if unaddressed",
                    ),
                ),
                (
                    "presentation_duration",
                    models.IntegerField(
                        default=90, help_text="Seconds to present scenario"
                    ),
                ),
                (
                    "response_duration",
                    models.IntegerField(
                        default=60, help_text="Seconds for players to respond"
                    ),
                ),
                (
                    "feedback_duration",
                    models.IntegerField(
                        default=120, help_text="Seconds to show results and feedback"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="climate_scenarios",
                        to="group_learning.climategame",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Scenario",
                "verbose_name_plural": "Climate Scenarios",
                "ordering": ["round_number"],
                "unique_together": {("game", "round_number")},
            },
        ),
        migrations.AddField(
            model_name="climatequestion",
            name="scenario",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="group_learning.climatescenario",
            ),
        ),
        migrations.CreateModel(
            name="ClimateRoundResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "response_summary",
                    models.JSONField(
                        default=dict,
                        help_text="Percentage breakdown of choices by role",
                    ),
                ),
                (
                    "meter_changes",
                    models.JSONField(
                        default=dict, help_text="How meters changed this round"
                    ),
                ),
                (
                    "meters_after",
                    models.JSONField(
                        default=dict, help_text="Meter values after this round"
                    ),
                ),
                (
                    "outcome_narrative",
                    models.TextField(
                        help_text="AI-generated or pre-written narrative about consequences"
                    ),
                ),
                (
                    "learning_outcome",
                    models.TextField(help_text="Key learning points from this round"),
                ),
                (
                    "collaboration_bonus",
                    models.IntegerField(
                        default=0,
                        help_text="Bonus points for complementary choices across roles",
                    ),
                ),
                (
                    "conflict_penalty",
                    models.IntegerField(
                        default=0, help_text="Penalty for contradictory choices"
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="round_results",
                        to="group_learning.climategamesession",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.climatescenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Round Result",
                "verbose_name_plural": "Climate Round Results",
                "ordering": ["-calculated_at"],
                "unique_together": {("session", "scenario")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="climatequestion",
            unique_together={("scenario", "role")},
        ),
        migrations.CreateModel(
            name="ClimatePlayerResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_name",
                    models.CharField(help_text="Player's display name", max_length=100),
                ),
                (
                    "player_session_id",
                    models.CharField(help_text="Anonymous player ID", max_length=100),
                ),
                (
                    "assigned_role",
                    models.CharField(
                        choices=[
                            ("government", "Government Official"),
                            ("business", "Business Owner"),
                            ("farmer", "Farmer"),
                            ("urban_citizen", "Urban Citizen"),
                            ("ngo_worker", "NGO Worker"),
                        ],
                        help_text="Role assigned to this player for entire game",
                        max_length=20,
                    ),
                ),
                (
                    "response_time",
                    models.FloatField(help_text="Seconds taken to respond"),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "round_number",
                    models.PositiveIntegerField(
                        help_text="Which round this response is for"
                    ),
                ),
                (
                    "reasoning",
                    models.TextField(blank=True, help_text="Optional player reasoning"),
                ),
                (
                    "climate_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="climate_responses",
                        to="group_learning.climategamesession",
                    ),
                ),
                (
                    "selected_option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.climateoption",
                    ),
                ),
                (
                    "climate_scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.climatescenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Climate Player Response",
                "verbose_name_plural": "Climate Player Responses",
                "ordering": ["-submitted_at"],
                "unique_together": {
                    ("climate_session", "player_session_id", "climate_scenario")
                },
            },
        ),
    ]

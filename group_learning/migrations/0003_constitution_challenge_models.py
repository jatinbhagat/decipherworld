# Generated by Django 5.2.5 on 2025-09-11 07:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("group_learning", "0002_add_performance_indexes"),
    ]

    operations = [
        migrations.AlterField(
            model_name="game",
            name="game_type",
            field=models.CharField(
                choices=[
                    ("crisis_response", "Crisis Response"),
                    ("environmental", "Environmental Challenge"),
                    ("social_issue", "Social Issue Resolution"),
                    ("governance", "Governance & Policy"),
                    ("community_building", "Community Building"),
                    ("constitution_challenge", "Constitution Challenge"),
                ],
                max_length=30,
            ),
        ),
        migrations.CreateModel(
            name="ConstitutionQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_text",
                    models.TextField(help_text="The main question asked to teams"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("leadership", "How Leaders Are Chosen"),
                            ("rules", "Who Makes Rules"),
                            ("rights", "Citizens Rights & Freedoms"),
                            ("justice", "Justice & Fairness"),
                            ("participation", "Citizen Participation"),
                            ("checks", "Checks & Balances"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "scenario_context",
                    models.TextField(
                        blank=True,
                        help_text="Brief scenario setup (e.g., 'Your new country needs to decide...')",
                    ),
                ),
                (
                    "learning_module_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for the learning pop-up",
                        max_length=200,
                    ),
                ),
                (
                    "learning_module_content",
                    models.TextField(
                        blank=True,
                        help_text="1-2 paragraphs explaining the governance concept",
                    ),
                ),
                (
                    "learning_module_comic_url",
                    models.URLField(
                        blank=True, help_text="Optional comic/illustration URL"
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Question sequence order"),
                ),
                (
                    "time_limit",
                    models.PositiveIntegerField(
                        default=60,
                        help_text="Time limit for teams to answer in seconds",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="constitution_questions",
                        to="group_learning.game",
                    ),
                ),
            ],
            options={
                "verbose_name": "Constitution Question",
                "verbose_name_plural": "Constitution Questions",
                "ordering": ["game", "order"],
                "unique_together": {("game", "order")},
            },
        ),
        migrations.CreateModel(
            name="ConstitutionOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("option_text", models.TextField(help_text="The answer choice text")),
                (
                    "option_letter",
                    models.CharField(
                        choices=[("A", "A"), ("B", "B"), ("C", "C"), ("D", "D")],
                        help_text="Option identifier (A, B, C, D)",
                        max_length=1,
                    ),
                ),
                (
                    "score_value",
                    models.IntegerField(
                        help_text="Points awarded for this choice (-5 to +5 typical range)"
                    ),
                ),
                (
                    "feedback_message",
                    models.TextField(
                        help_text="Short explanation of why this choice earns/loses points"
                    ),
                ),
                (
                    "governance_principle",
                    models.CharField(
                        blank=True,
                        help_text="The governance principle this choice represents (e.g., 'Democracy', 'Checks & Balances')",
                        max_length=100,
                    ),
                ),
                (
                    "color_class",
                    models.CharField(
                        choices=[
                            ("blue", "Blue"),
                            ("green", "Green"),
                            ("yellow", "Yellow"),
                            ("red", "Red"),
                            ("purple", "Purple"),
                            ("orange", "Orange"),
                        ],
                        default="blue",
                        help_text="Color for the answer button",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="group_learning.constitutionquestion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Constitution Option",
                "verbose_name_plural": "Constitution Options",
                "ordering": ["question", "option_letter"],
                "unique_together": {("question", "option_letter")},
            },
        ),
        migrations.CreateModel(
            name="ConstitutionTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "team_name",
                    models.CharField(
                        help_text="Team's chosen country name", max_length=100
                    ),
                ),
                (
                    "team_avatar",
                    models.CharField(
                        default="üèõÔ∏è",
                        help_text="Emoji or icon representing the team",
                        max_length=50,
                    ),
                ),
                (
                    "country_color",
                    models.CharField(
                        default="#3B82F6",
                        help_text="Team's chosen color (hex code)",
                        max_length=7,
                    ),
                ),
                (
                    "flag_emoji",
                    models.CharField(
                        default="üè¥",
                        help_text="Team's chosen flag emoji",
                        max_length=10,
                    ),
                ),
                (
                    "total_score",
                    models.IntegerField(
                        default=0, help_text="Team's total governance score"
                    ),
                ),
                ("questions_completed", models.PositiveIntegerField(default=0)),
                ("is_completed", models.BooleanField(default=False)),
                ("completion_time", models.DateTimeField(blank=True, null=True)),
                (
                    "team_data",
                    models.JSONField(
                        default=dict,
                        help_text="Store team member votes, discussion data, etc.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_question",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current question the team is answering",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="group_learning.constitutionquestion",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="constitution_teams",
                        to="group_learning.gamesession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Constitution Team",
                "verbose_name_plural": "Constitution Teams",
                "ordering": ["-total_score", "completion_time"],
            },
        ),
        migrations.CreateModel(
            name="CountryState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_city_level",
                    models.CharField(
                        choices=[
                            (
                                "struggling_settlement",
                                "Struggling Settlement - Dull huts, rain",
                            ),
                            ("simple_village", "Simple Village - Hamlet, dusty roads"),
                            ("growing_town", "Growing Town - School, first court"),
                            ("thriving_city", "Thriving City - Public square, parks"),
                            ("great_capital", "Great Capital - Landmarks, monuments"),
                            (
                                "ideal_nation",
                                "Ideal Nation - Radiant metropolis, parade",
                            ),
                        ],
                        default="struggling_settlement",
                        max_length=30,
                    ),
                ),
                (
                    "democracy_score",
                    models.IntegerField(
                        default=0, help_text="Democratic participation level"
                    ),
                ),
                (
                    "fairness_score",
                    models.IntegerField(
                        default=0, help_text="Justice and fairness level"
                    ),
                ),
                (
                    "freedom_score",
                    models.IntegerField(
                        default=0, help_text="Individual freedoms level"
                    ),
                ),
                (
                    "stability_score",
                    models.IntegerField(
                        default=0, help_text="Political stability level"
                    ),
                ),
                (
                    "unlocked_features",
                    models.JSONField(
                        default=list,
                        help_text="List of visual features unlocked (e.g., ['school', 'courthouse', 'parliament'])",
                    ),
                ),
                (
                    "country_description",
                    models.TextField(
                        blank=True,
                        help_text="Generated description of the country based on choices",
                    ),
                ),
                (
                    "achievement_badges",
                    models.JSONField(
                        default=list,
                        help_text="Special badges earned (e.g., ['democratic_leader', 'fair_justice'])",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "team",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="country_state",
                        to="group_learning.constitutionteam",
                    ),
                ),
            ],
            options={
                "verbose_name": "Country State",
                "verbose_name_plural": "Country States",
            },
        ),
        migrations.CreateModel(
            name="ConstitutionAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer_time", models.DateTimeField(auto_now_add=True)),
                (
                    "time_taken",
                    models.PositiveIntegerField(help_text="Seconds taken to answer"),
                ),
                (
                    "team_discussion",
                    models.TextField(
                        blank=True,
                        help_text="Any team discussion or reasoning recorded",
                    ),
                ),
                (
                    "vote_breakdown",
                    models.JSONField(
                        default=dict,
                        help_text="How individual team members voted (if tracked)",
                    ),
                ),
                (
                    "points_earned",
                    models.IntegerField(help_text="Points this answer contributed"),
                ),
                (
                    "score_before",
                    models.IntegerField(help_text="Team score before this answer"),
                ),
                (
                    "score_after",
                    models.IntegerField(help_text="Team score after this answer"),
                ),
                (
                    "chosen_option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.constitutionoption",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.constitutionquestion",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="group_learning.constitutionteam",
                    ),
                ),
            ],
            options={
                "verbose_name": "Constitution Answer",
                "verbose_name_plural": "Constitution Answers",
                "ordering": ["team", "question__order"],
                "unique_together": {("team", "question")},
            },
        ),
    ]

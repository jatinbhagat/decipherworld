# Generated by Django 5.2.5 on 2025-09-07 11:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Game title (e.g., 'Climate Crisis India')",
                        max_length=200,
                    ),
                ),
                (
                    "subtitle",
                    models.CharField(
                        blank=True, help_text="Descriptive subtitle", max_length=300
                    ),
                ),
                (
                    "game_type",
                    models.CharField(
                        choices=[
                            ("crisis_response", "Crisis Response"),
                            ("environmental", "Environmental Challenge"),
                            ("social_issue", "Social Issue Resolution"),
                            ("governance", "Governance & Policy"),
                            ("community_building", "Community Building"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Overview of what this game teaches"),
                ),
                (
                    "context",
                    models.TextField(
                        help_text="Background context (e.g., Indian climate challenges)"
                    ),
                ),
                (
                    "min_players",
                    models.PositiveIntegerField(
                        default=2, help_text="Minimum players needed"
                    ),
                ),
                (
                    "max_players",
                    models.PositiveIntegerField(
                        default=8, help_text="Maximum players allowed"
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        help_text="Estimated play time in minutes"
                    ),
                ),
                (
                    "target_age_min",
                    models.PositiveIntegerField(help_text="Minimum recommended age"),
                ),
                (
                    "target_age_max",
                    models.PositiveIntegerField(help_text="Maximum recommended age"),
                ),
                (
                    "difficulty_level",
                    models.PositiveIntegerField(
                        choices=[(1, "Beginner"), (2, "Intermediate"), (3, "Advanced")],
                        default=1,
                    ),
                ),
                (
                    "cover_image",
                    models.URLField(blank=True, help_text="Game cover image URL"),
                ),
                (
                    "introduction_text",
                    models.TextField(help_text="Introduction shown to players"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Game",
                "verbose_name_plural": "Games",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LearningModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the learning module", max_length=100
                    ),
                ),
                (
                    "module_type",
                    models.CharField(
                        choices=[
                            ("science", "Science & Environment"),
                            ("civics", "Civics & Governance"),
                            ("social", "Social & Communication"),
                            ("mathematics", "Mathematics & Analytics"),
                            ("language", "Language & Literature"),
                            ("life_skills", "Life Skills & Ethics"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(help_text="What this module covers")),
                (
                    "grade_level",
                    models.CharField(
                        help_text="Target grade/age (e.g., '6-8', '9-12')",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Learning Module",
                "verbose_name_plural": "Learning Modules",
                "ordering": ["module_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Role name (e.g., 'District Collector')",
                        max_length=100,
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        help_text="Short name for UI (e.g., 'Collector')", max_length=50
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Role description and responsibilities"),
                ),
                (
                    "authority_level",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Individual/Citizen"),
                            (2, "Community Leader"),
                            (3, "Local Official"),
                            (4, "Regional Authority"),
                            (5, "State/National Level"),
                        ],
                        default=1,
                        help_text="Level of authority/influence this role has",
                    ),
                ),
                (
                    "expertise_areas",
                    models.JSONField(
                        default=list,
                        help_text="List of expertise areas (e.g., ['agriculture', 'emergency_response'])",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="Icon class or emoji", max_length=100
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff", help_text="Role color (hex)", max_length=7
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "ordering": ["-authority_level", "name"],
            },
        ),
        migrations.CreateModel(
            name="GameSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_code",
                    models.CharField(
                        help_text="Join code for players", max_length=10, unique=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting for Players"),
                            ("in_progress", "Game in Progress"),
                            ("completed", "Completed"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="waiting",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("allow_spectators", models.BooleanField(default=True)),
                ("auto_assign_roles", models.BooleanField(default=True)),
                (
                    "session_data",
                    models.JSONField(
                        default=dict, help_text="Session state and progress data"
                    ),
                ),
                (
                    "facilitator",
                    models.ForeignKey(
                        blank=True,
                        help_text="Teacher/facilitator running the session",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="group_learning.game",
                    ),
                ),
            ],
            options={
                "verbose_name": "Game Session",
                "verbose_name_plural": "Game Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LearningObjective",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Clear, concise learning objective", max_length=200
                    ),
                ),
                (
                    "objective_type",
                    models.CharField(
                        choices=[
                            ("knowledge", "Knowledge & Understanding"),
                            ("skills", "Skills & Application"),
                            ("attitudes", "Attitudes & Values"),
                            ("critical_thinking", "Critical Thinking"),
                            ("collaboration", "Collaboration & Teamwork"),
                            ("empathy", "Empathy & Social Awareness"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what students will learn"
                    ),
                ),
                (
                    "success_criteria",
                    models.TextField(
                        blank=True,
                        help_text="How to measure if this objective was achieved",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "learning_modules",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Curriculum modules this objective addresses",
                        to="group_learning.learningmodule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Learning Objective",
                "verbose_name_plural": "Learning Objectives",
                "ordering": ["objective_type", "title"],
            },
        ),
        migrations.AddField(
            model_name="game",
            name="learning_objectives",
            field=models.ManyToManyField(
                blank=True,
                help_text="What students will learn from this game",
                to="group_learning.learningobjective",
            ),
        ),
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Action title (e.g., 'Evacuate town')", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what this action involves"
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate Response"),
                            ("planning", "Planning & Strategy"),
                            ("communication", "Communication & Coordination"),
                            ("resource_allocation", "Resource Allocation"),
                            ("policy", "Policy & Regulation"),
                            ("community_engagement", "Community Engagement"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "resource_cost",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Low Cost"),
                            (2, "Medium Cost"),
                            (3, "High Cost"),
                            (4, "Very High Cost"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "time_required",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Immediate"),
                            (2, "Short Term (Hours)"),
                            (3, "Medium Term (Days)"),
                            (4, "Long Term (Weeks+)"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "effectiveness_factors",
                    models.JSONField(
                        default=dict,
                        help_text="Factors that affect action effectiveness (JSON)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "requires_other_roles",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Other roles that must cooperate for this action to succeed",
                        related_name="required_for_actions",
                        to="group_learning.role",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="group_learning.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "Action",
                "verbose_name_plural": "Actions",
                "ordering": ["scenario", "role", "action_type"],
            },
        ),
        migrations.CreateModel(
            name="Scenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Scenario title (e.g., 'Monsoon Mayhem')",
                        max_length=200,
                    ),
                ),
                (
                    "scenario_type",
                    models.CharField(
                        choices=[
                            ("natural_disaster", "Natural Disaster"),
                            ("environmental_crisis", "Environmental Crisis"),
                            ("social_conflict", "Social Conflict"),
                            ("resource_shortage", "Resource Shortage"),
                            ("policy_decision", "Policy Decision"),
                            ("community_challenge", "Community Challenge"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "situation_description",
                    models.TextField(
                        help_text="Detailed description of the crisis situation"
                    ),
                ),
                (
                    "urgency_level",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Low - Plan and Prepare"),
                            (2, "Medium - Act Soon"),
                            (3, "High - Immediate Action"),
                            (4, "Critical - Emergency Response"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Where this scenario takes place", max_length=200
                    ),
                ),
                (
                    "cultural_context",
                    models.TextField(
                        blank=True,
                        help_text="Cultural, social, or regional context relevant to the scenario",
                    ),
                ),
                (
                    "time_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time limit for decisions in minutes (null for no limit)",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=1, help_text="Order within the game"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scenarios",
                        to="group_learning.game",
                    ),
                ),
                (
                    "learning_objectives",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific learning goals for this scenario",
                        to="group_learning.learningobjective",
                    ),
                ),
                (
                    "prerequisite_scenarios",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Scenarios that must be completed first",
                        to="group_learning.scenario",
                    ),
                ),
                (
                    "required_roles",
                    models.ManyToManyField(
                        help_text="Roles that must be present for this scenario",
                        to="group_learning.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scenario",
                "verbose_name_plural": "Scenarios",
                "ordering": ["game", "order"],
                "unique_together": {("game", "order")},
            },
        ),
        migrations.CreateModel(
            name="ReflectionResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_name", models.CharField(max_length=100)),
                ("player_session_id", models.CharField(max_length=100)),
                (
                    "question",
                    models.TextField(help_text="The reflection question asked"),
                ),
                (
                    "response",
                    models.TextField(help_text="Player's reflection response"),
                ),
                (
                    "confidence_level",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "1/5"),
                            (2, "2/5"),
                            (3, "3/5"),
                            (4, "4/5"),
                            (5, "5/5"),
                        ],
                        help_text="How confident the player feels about the learning objective",
                    ),
                ),
                (
                    "engagement_level",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "1/5"),
                            (2, "2/5"),
                            (3, "3/5"),
                            (4, "4/5"),
                            (5, "5/5"),
                        ],
                        help_text="How engaged the player felt during the scenario",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "learning_objective",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.learningobjective",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reflections",
                        to="group_learning.gamesession",
                    ),
                ),
                (
                    "role_played",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.role",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.scenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reflection Response",
                "verbose_name_plural": "Reflection Responses",
                "ordering": ["session", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Outcome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(help_text="Outcome title", max_length=200)),
                (
                    "outcome_type",
                    models.CharField(
                        choices=[
                            ("success", "Successful Resolution"),
                            ("partial", "Partial Success"),
                            ("failure", "Poor Outcome"),
                            ("mixed", "Mixed Results"),
                            ("unexpected", "Unexpected Consequences"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(help_text="What happens as a result")),
                (
                    "immediate_consequences",
                    models.TextField(help_text="Immediate effects"),
                ),
                (
                    "long_term_effects",
                    models.TextField(blank=True, help_text="Long-term consequences"),
                ),
                (
                    "success_score",
                    models.PositiveIntegerField(
                        choices=[
                            (1, 1),
                            (2, 2),
                            (3, 3),
                            (4, 4),
                            (5, 5),
                            (6, 6),
                            (7, 7),
                            (8, 8),
                            (9, 9),
                            (10, 10),
                        ],
                        default=5,
                        help_text="Success rating (1-10)",
                    ),
                ),
                (
                    "probability_weight",
                    models.FloatField(
                        default=1.0,
                        help_text="Relative probability if conditions are met",
                    ),
                ),
                (
                    "learning_points",
                    models.TextField(
                        help_text="Key learning points highlighted by this outcome"
                    ),
                ),
                (
                    "reflection_questions",
                    models.JSONField(
                        default=list, help_text="Questions for post-game reflection"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "required_actions",
                    models.ManyToManyField(
                        help_text="Actions that must be taken for this outcome",
                        to="group_learning.action",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outcomes",
                        to="group_learning.scenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Outcome",
                "verbose_name_plural": "Outcomes",
                "ordering": ["-success_score", "scenario"],
            },
        ),
        migrations.AddField(
            model_name="gamesession",
            name="current_scenario",
            field=models.ForeignKey(
                blank=True,
                help_text="Currently active scenario",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="group_learning.scenario",
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="scenario",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actions",
                to="group_learning.scenario",
            ),
        ),
        migrations.CreateModel(
            name="PlayerAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_name",
                    models.CharField(help_text="Player's display name", max_length=100),
                ),
                (
                    "player_session_id",
                    models.CharField(help_text="Anonymous player ID", max_length=100),
                ),
                ("decision_time", models.DateTimeField(auto_now_add=True)),
                (
                    "reasoning",
                    models.TextField(
                        blank=True, help_text="Player's explanation of their choice"
                    ),
                ),
                ("round_number", models.PositiveIntegerField(default=1)),
                ("is_final_decision", models.BooleanField(default=True)),
                (
                    "action",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.action",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_actions",
                        to="group_learning.gamesession",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.role",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="group_learning.scenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Player Action",
                "verbose_name_plural": "Player Actions",
                "ordering": ["session", "round_number", "decision_time"],
                "unique_together": {("session", "scenario", "role", "round_number")},
            },
        ),
    ]
